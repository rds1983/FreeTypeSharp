using System;
using System.Collections.Generic;
using System.IO;
using System.Text;
using Sichem;

namespace StbImageResizeSharp.Generator
{
	class Program
	{
		private static void Write(Dictionary<string, string> input, StringBuilder output)
		{
			foreach (var pair in input)
			{
				output.Append(pair.Value);
			}
		}

		private static string PostProcess(string data)
		{
			data = Utility.ReplaceNativeCalls(data);

			data = data.Replace("((void*)(0))", "null");
			data = data.Replace("((void *)(0))", "null");
			data = data.Replace("union ", "");
			data = data.Replace("volatile ", "");
			data = data.Replace("int (FT_FaceRec_ *, unsigned int, unsigned int, int, long *)*", "FT_Driver_ClassRec_.get_advances_func");

			return data;
		}

		static void Process()
		{
			var parameters = new ConversionParameters
			{
				AdditionalIncludeFolders = new string[]
				{
					@"C:\Projects\StbSharp\FreeTypeSharp\FreeTypeTest\FreeTypeTest\freetype\include"
				},
				InputPath = @"C:\Projects\StbSharp\FreeTypeSharp\FreeTypeTest\FreeTypeTest\freetype\src\base\ftbase.c",
				Defines = new string[]
				{
					"_LIB",
					"_CRT_SECURE_NO_WARNINGS",
					"FT2_BUILD_LIBRARY"
				},
				SkipEnums = new string[]
				{
					"FT_Encoding_",
					"FT_Glyph_Format_",
				},
				SkipStructs = new string[]
				{
					"FT_StreamDesc_",
					"FT_StreamRec_",
					"TT_Post_NamesRec_names",
					"TT_Post_NamesRec_",
					"FT_HashnodeRec_",
					"FT_HashRec_",
					"FT_Service_PsCMapsRec_",
					"T1_Decoder_FuncsRec_",
					"PS_BlendRec_",
					"CFF_InternalRec_",
					"CFF_Decoder_FuncsRec_",
				},
				SkipGlobalVariables = new string[]
				{
				},
				SkipFunctions = new string[]
				{
					"FT_Raccess_Get_DataOffsets"
				},
				Classes = new string[]
				{
					"FT_FaceRec_",
					"FT_Outline_Funcs_",
					"FT_Renderer_Class_",
					"FT_RendererRec_",
					"FT_ModuleRec_",
					"FT_Module_Class_",
					"FT_MemoryRec_",
					"FT_LibraryRec_",
					"FT_StreamRec_",
					"ft_raccess_guess_rec_",
					"FT_CharMapRec_",
					"FT_Raster_Params_",
					"FT_GlyphSlotRec_",
					"FT_Slot_InternalRec_",
					"FT_SizeRec_",
					"FT_CharMapRec_",
					"FT_DriverRec_",
					"FT_Driver_ClassRec_",
					"FT_GlyphRec_",
					"FT_Glyph_Class_",
					"FT_Raster_Funcs_",
					"FT_Incremental_FuncsRec_",
					"FT_CMapRec_",
					"FT_CMap_ClassRec_",
					"FT_Face_InternalRec_",
					"FT_Incremental_InterfaceRec_",
					"FT_GlyphLoaderRec_",
					"TT_FaceRec_",
					"TT_LoaderRec_",
					"SFNT_Interface_",
					"FT_HashRec_",
					"PSH_Globals_FuncsRec_",
					"PSH_GlobalsRec_",
					"T1_Hints_FuncsRec_",
					"T2_Hints_FuncsRec_",
					"FT_Service_PsCMapsRec_",
					"PS_UnicodesRec_",
					"PS_BlendRec_",
					"CFF_FontRec_",
					"CFF_SubFontRec_",
					"PSHinter_Interface_",
					"PS_Table_FuncsRec_",
					"PS_TableRec_",
					"PS_Parser_FuncsRec_",
					"PS_ParserRec_",
					"T1_FieldRec_",
					"PS_Builder_",
					"CFF_GlyphSlotRec_",
					"FT_Generic_",
					"PS_Decoder_",
					"T1_BuilderRec_",
					"T1_Decoder_FuncsRec_",
					"T1_DecoderRec_",
					"CFF_Builder_",
					"CFF_SizeRec_",
					"CFF_Decoder_",
					"AFM_ParserRec_",
					"T1_Builder_FuncsRec_",
					"T1_CMap_ClassesRec_",
					"AFM_Parser_FuncsRec_",
					"CFF_Decoder_FuncsRec_",
					"FT_Service_PropertiesRec_",
					"FT_Service_SFNT_TableRec_",
					"FT_Service_PsFontNameRec_",
					"FT_Service_GlyphDictRec_",
					"FT_GlyphLoadRec_",
				},
				GlobalArrays = new string[]
				{
				}
			};

			var cp = new ClangParser();

			var result = cp.Process(parameters);

			// Write output
			var sb = new StringBuilder();
			sb.AppendLine(string.Format("// Generated by Sichem at {0}", DateTime.Now));
			sb.AppendLine();

			sb.AppendLine("using System;");
			sb.AppendLine("using System.Runtime.InteropServices;");

			sb.AppendLine();

			sb.Append("namespace FreeTypeSharp\n{\n\t");
			sb.AppendLine("unsafe partial class FreeType\n\t{");

			Write(result.Constants, sb);
			Write(result.GlobalVariables, sb);
			Write(result.Enums, sb);
			Write(result.Structs, sb);
			Write(result.Methods, sb);

			sb.Append("}\n}");
			var data = sb.ToString();

			// Post processing
			Logger.Info("Post processing...");
			data = PostProcess(data);

			File.WriteAllText(@"..\..\..\..\..\src\FtBase.Generated.cs", data);
		}

		static void Main(string[] args)
		{
			try
			{
				Process();
			}
			catch (Exception ex)
			{
				Console.WriteLine(ex.Message);
				Console.WriteLine(ex.StackTrace);
			}

			Console.WriteLine("Finished. Press any key to quit.");
			Console.ReadKey();
		}
	}
}